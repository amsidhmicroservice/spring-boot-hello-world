# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

name: Gradle Package

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [ created ]
#  schedule:
#    # * is a special character in YAML so you have to quote this string
#    - cron: '30 4,17 * * *'

env:
  GKE_CLUSTER_NAME: spring-boot-hello-world-cluster
  GKE_CLUSTER_ZONE: us-central1-c
  DEPLOYMENT_NAME: spring-boot-hello-world

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: Build with Gradle
        run: gradle build

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: amsidhmicroservice/spring-boot-hello-world:latest,amsidhmicroservice/spring-boot-hello-world:0.0.1-SNAPSHOT

      - name: Setup GCloud CLI
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.SERVICE_ACCOUNT_KEY }}
          export_default_credentials: true

      - name: Check gcloud CLI command
        run: gcloud info

      # Get the GKE credentials so we can deploy to the cluster
      - name: Get the GKE credentials
        run: |-
          gcloud container clusters get-credentials "$GKE_CLUSTER_NAME" --zone "$GKE_CLUSTER_ZONE"

      # Deploy Hello-World Service images to the GKE cluster ===============First Way with kubectl apply=======
#      - name: Deployment to the GKE Cluster
#        run: |-
#          kubectl apply -f deployment/hello-world-deployment.yaml
#          kubectl get services -o wide
      # END OF Deploy Hello-World Service images to the GKE cluster ===============First Way with kubectl apply=======

      # Install helm ========Second  Way Using Helm========================
#      - name: Install Helm
#        run: |
#          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
#          helm version

      # Deploy the Docker image to the GKE cluster
#     - name: Deploy Hello-World using helm chart
#       run: |
#          helm install --generate-name helm/ --wait
#          kubectl rollout status deployment/$DEPLOYMENT_NAME
#          kubectl get services -o wide
      # END OF Install helm ========Second  Way Using Helm========================

      # Install helm ========Third  Way Using Helm========================
      - name: Helm Deployment Using inbuilt github action
        uses: hahow/install-helm-chart-action@v1.0.3
        with:
          gcloud_auth_key: ${{ secrets.SERVICE_ACCOUNT_KEY }}
          gcloud_project_id: ${{ secrets.GCP_PROJECT_ID }}
          cluster_name: ${{ secrets.GKE_CLUSTER_NAME }}
          cluster_region: ${{ secrets.GKE_CLUSTER_ZONE }}
          release_namespace: ${{ secrets.GKE_CLUSTER_NAMESPACE }}
          release_name: ${{ secrets.RELEASE_NAME }}
          chart_name: ./helm/
          helm_upgrade_args: |
            --set image.tag=${{ github.sha }}



